(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[150],{9087:function(t,e,n){"use strict";var a=n(6156),r=n(5893),i=n(2105);function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){(0,a.Z)(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}e.Z=function(t){var e=t.label,n=t.url,a=t.name,l=t.anchor,m={};return n?m.href=n:l?m.href="#".concat((0,i.Md)(e)):a&&(m.name="".concat((0,i.Md)(e))),(0,r.jsx)("a",o(o({},m),{},{children:e}))}},150:function(t,e,n){"use strict";n.r(e),n.d(e,{meta:function(){return s},default:function(){return h}});var a=n(6156),r=n(7375),i=(n(7294),n(4137)),l=n(2052),o=n(2919),m=n(3042),p=n(9087);function c(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function k(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?c(Object(n),!0).forEach((function(e){(0,a.Z)(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var s={title:"Big-O Notations",description:"Big O notation is a mathematical notation that describes the limiting behavior of a function when the argument tends towards a particular value or infinity. Big O is a member of a family of notations invented by Paul Bachmann.",date:"Aug 8, 2021",readTime:10},u={meta:s},d=function(t){var e=t.children;return(0,i.kt)(l.Z,{meta:s},e)};function h(t){var e=t.components,n=(0,r.Z)(t,["components"]);return(0,i.kt)(d,k(k(k({},u),n),{},{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",null,"Table of Contents"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",k({parentName:"li"},{href:"#history"}),"History")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",k({parentName:"li"},{href:"#why-big-o-notations?-why-not-with-time?"}),"Why BigO Notations?")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",k({parentName:"li"},{href:"#points-to-remember"}),"Points To Remember")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",k({parentName:"li"},{href:"#time-complexity"}),"Time Complexity"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",k({parentName:"li"},{href:"#constant-time"}),"Constant Time O(1)")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",k({parentName:"li"},{href:"#logarithmic-time-o(log-n)"}),"Logarithmic Time O(log n)")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",k({parentName:"li"},{href:"#linear-time-o(n)"}),"Linear Time O(n)")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",k({parentName:"li"},{href:"#linear-logarithmic-time"}),"Linear Logarithmic Time O(n log n)")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",k({parentName:"li"},{href:"#quadratic-time"}),"Quadratic Time O(n",(0,i.kt)("sup",null,"2"),")")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",k({parentName:"li"},{href:"#cubic-time"}),"Cubic Time O(n",(0,i.kt)("sup",null,"3"),")")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",k({parentName:"li"},{href:"#exponential-time"}),"Exponential Time O(2n)")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",k({parentName:"li"},{href:"#space-complexity"}),"Space Complexity"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",k({parentName:"li"},{href:"#come-soon"}),"come"))))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Big O notation is a mathematical notation that describes the limiting behavior of a function when the argument tends towards a particular value or infinity. ")),(0,i.kt)("h2",null,(0,i.kt)(p.Z,{label:"History",name:!0,mdxType:"AnchorLink"})),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Big O is a member of a family of notations invented by ",(0,i.kt)(m.Z,{url:"https://en.wikipedia.org/wiki/Paul_Gustav_Heinrich_Bachmann",mdxType:"ExternalLink"},"Paul Bachmann")," son of Johann Friedrich Bachmann (1799-1876) and a Lutheran minister (teachings of Jesus Christ and was founded by ",(0,i.kt)(m.Z,{url:"https://en.wikipedia.org/wiki/Martin_Luther",mdxType:"ExternalLink"},"Martin Luther"),"),"),(0,i.kt)("li",{parentName:"ol"},"It represents the algorithm\u2019s scalability and performance.")),(0,i.kt)("h2",null,(0,i.kt)(p.Z,{label:"Why Big O Notations? why not with Time?",name:!0,mdxType:"AnchorLink"})),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Not every computer hardware is same. Due to this, efficient code takes long time to execute in old machine or in-efficient code execute quickly in high end machine. but that doesn't meant your code is efficient or in-efficient by evaluating through running time. so we need common notation for better evaluation.")),(0,i.kt)("h2",null,(0,i.kt)(p.Z,{label:"Points To Remember",name:!0,mdxType:"AnchorLink"})),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"There are Best, Average and Worst Cases."),(0,i.kt)("li",{parentName:"ol"},"Always solve your problem with worst case scenario which is having complex input."),(0,i.kt)("li",{parentName:"ol"},"With Big O Notation, we call the size of the input as ",(0,i.kt)("inlineCode",{parentName:"li"},"n"),".")),(0,i.kt)("h2",null,(0,i.kt)(p.Z,{label:"Order of Growth",name:!0,mdxType:"AnchorLink"})),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",k({parentName:"tr"},{align:"center"})),(0,i.kt)("th",k({parentName:"tr"},{align:"center"}),"Constant"),(0,i.kt)("th",k({parentName:"tr"},{align:"center"}),"Logarithmic"),(0,i.kt)("th",k({parentName:"tr"},{align:"center"}),"Linear"),(0,i.kt)("th",k({parentName:"tr"},{align:"center"}),"N Log N"),(0,i.kt)("th",k({parentName:"tr"},{align:"center"}),"Quadratic"),(0,i.kt)("th",k({parentName:"tr"},{align:"center"}),"Cubic"),(0,i.kt)("th",k({parentName:"tr"},{align:"center"}),"Exponential"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"N"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"O(1)"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"O(log n)"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"O(n)"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"O(n log n)"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"O(n",(0,i.kt)("sup",null,"2"),")"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"O(n",(0,i.kt)("sup",null,"3"),")"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"O(2",(0,i.kt)("sup",null,"n"),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"1"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"1"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"1"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"1"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"1"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"1"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"1"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"2")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"2"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"1"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"1"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"2"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"2"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"4"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"8"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"4")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"4"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"1"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"2"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"4"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"8"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"16"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"64"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"16")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"8"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"1"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"3"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"8"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"24"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"64"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"512"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"256")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"16"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"1"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"4"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"16"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"64"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"256"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"4,096"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"65536")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"32"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"1"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"5"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"32"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"160"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"1,024"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"32,768"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"4,294,967,296")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"64"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"1"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"6"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"64"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"384"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"4,069"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"262,144"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"1.84 X 10",(0,i.kt)("sup",null,"19"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"1024"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"1"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"10"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"1,024"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"10,240"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"1,048,576"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"1,073,741,824"),(0,i.kt)("td",k({parentName:"tr"},{align:"center"}),"still curious?")))),(0,i.kt)("hr",null),(0,i.kt)("h2",null,(0,i.kt)(p.Z,{label:"Time Complexity",name:!0,mdxType:"AnchorLink"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time Complexity is computational complexity that describes the amount of time required to perform the computation. "),(0,i.kt)("li",{parentName:"ul"},"Its helps to estimate the running time of a program. "),(0,i.kt)("li",{parentName:"ul"},"Performing an accurate calculation on program's operation time is labour-intensive process because its depends on the hardware spec like compiler, processor speed."),(0,i.kt)("li",{parentName:"ul"},"Its important note about Dominant operations are always considered those operation performed largest number of times depends on specific input data.")),(0,i.kt)("h3",null,"1. Constant Time O(1)"),(0,i.kt)("p",null,"This takes constant / same time regardless of the number of inputs. always execute in same amount of time, doesn't matter about input size."),(0,i.kt)("p",null,"Example 1.1: function return whether number is odd or even."),(0,i.kt)(o.Z,{mdxType:"CodeBlock"},"\nfunction isEvenOrOdd(n) {\n  return n % 2 ? 'Odd' : 'Even';\n}\n"),(0,i.kt)("p",null,"Example 1.2: Look-up table - function return exist key's value."),(0,i.kt)(o.Z,{mdxType:"CodeBlock"},"\nconst greetTable = { en: 'Hi', fr: '', ta: '\u0bb5\u0ba3\u0b95\u0bcd\u0b95\u0bae\u0bcd' }\nfunction greet(locale = 'en') {\n  return greetTable[locale];\n}\n"),(0,i.kt)("p",null,"Example 1.2: Find Square of number."),(0,i.kt)(o.Z,{mdxType:"CodeBlock"},"\nfunction square(no) {\n  return no * no\n}\n"),(0,i.kt)("h3",null,"2. ",(0,i.kt)(p.Z,{label:"Logarithmic Time O(log n)",name:!0,mdxType:"AnchorLink"})),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Most efficient sorts are an example of this, such as merge sort. \u200bIt is O(log n) and search such as Binary Search."),(0,i.kt)("li",{parentName:"ol"},"When a complex problem is solved by transforming it into a smaller pieces by some constant fraction is Logarithmic."),(0,i.kt)("li",{parentName:"ol"},"This take space proportional to the log of the input size.")),(0,i.kt)("p",null,"Example 2.1: function return logarithmic.  value of n is halved on each iteration of the loop."),(0,i.kt)(o.Z,{mdxType:"CodeBlock"},"\nfunction logarithmic(n) {\n  let result = 0\n  while(n>1) {\n    n = n / 2;\n    result = result + 1\n  }\n  return result\n}\n"),(0,i.kt)("h3",null,"3. ",(0,i.kt)(p.Z,{label:"Linear Time O(n)",name:!0,mdxType:"AnchorLink"})),(0,i.kt)("p",null,"Simple multiply table if i pass ",(0,i.kt)("inlineCode",{parentName:"p"},"multiply(2)")),(0,i.kt)(o.Z,{mdxType:"CodeBlock"},"\nfunction multiply(no) {\n  for(let i=0;i<=no;i++) {\n    console.log(i, ': ', i*no)\n  }\n}\n"),(0,i.kt)("h2",null,(0,i.kt)(p.Z,{label:"Space Complexity",name:!0,mdxType:"AnchorLink"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Space complexity is the amount of memory required to perform the computation by Algorithm"),(0,i.kt)("li",{parentName:"ul"},"Algorithm / Program consider Variables, Program Instruction and Execution, contents of the stack if its recursion."),(0,i.kt)("li",{parentName:"ul"},"Speed will rely on the computing power of the machine on which it\u2019s executed."),(0,i.kt)("li",{parentName:"ul"},"Memory limits are crucial and this will share info on expected space complexity."),(0,i.kt)("li",{parentName:"ul"},"When there is constant numbers of variables, which means you have constant space complexity.")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"In algorithmics, space and time are like two separate poles. Increasing speed will most often lead to increased memory consumption and vice-versa. for example: merge sort, which is extremely fast but requires a lot of memory and bubble sort, a slow algorithm but one that occupies minimal space.")))}h.isMDXComponent=!0}}]);